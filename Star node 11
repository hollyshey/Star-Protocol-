import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from scipy.stats import gaussian_kde

# نمونه داده غیر بلاکچینی فرضی
data = {
    "height": 12345,
    "timestamp": "2025-06-03T07:25:45Z",
    "transactions": 1500,
    "total_sent": 5000.0,
    "avg_value": 3.33,
    "median_value": 1.25,
    "input_count": 3200,
    "output_count": 3300,
    "fees": 0.05,
    "reward": 12.5,
    "difficulty": 1.27e12,
    "nonce": 1766693919,
    "size_bytes": 1553620,
    "weight": 3993670,
    "pool": "Sample Mining Pool"
}

def analyze_data(data):
    print(f"Height: {data['height']}")
    print(f"Number of Transactions: {data['transactions']}")
    print(f"Total Sent: {data['total_sent']}")
    print(f"Total Fees: {data['fees']}")
    print(f"Pool: {data['pool']}")
    print(f"Average Value per Transaction: {data['avg_value']:.6f}")
    print(f"Median Value per Transaction: {data['median_value']:.6f}")
    print(f"Size: {data['size_bytes'] / 1_000_000:.2f} MB")
    print(f"Difficulty: {data['difficulty']:.2e}")
    print(f"Nonce: {data['nonce']}")
    print(f"Timestamp: {data['timestamp']}")
    
    print("\n--- Basic Metrics ---")
    tx_per_byte = data['transactions'] / data['size_bytes']
    fee_per_tx = data['fees'] / data['transactions']
    print(f"Transactions per byte: {tx_per_byte:.6f}")
    print(f"Average Fee per Transaction: {fee_per_tx:.8f}")

analyze_data(data)

# --- پیش‌بینی زمان استخراج یا رخداد آینده با رگرسیون خطی ---

np.random.seed(42)
x_vals = np.arange(1, 51).reshape(-1, 1)
y_vals = np.random.normal(loc=10, scale=2, size=50)

model = LinearRegression()
model.fit(x_vals, y_vals)

future_x = np.arange(51, 101).reshape(-1, 1)
predicted_y = model.predict(future_x)

print("\nپیش‌بینی برای 50 مرحله آینده:")
for i, pred in zip(future_x.flatten(), predicted_y):
    print(f"Step {i}: {pred:.2f}")

plt.figure(figsize=(10, 6))
plt.scatter(x_vals, y_vals, color='blue', label='Observed')
plt.plot(future_x, predicted_y, color='red', label='Predicted')
plt.xlabel('Step')
plt.ylabel('Value')
plt.title('Prediction Using Linear Regression')
plt.legend()
plt.grid(True)
plt.show()

# --- تحلیل توزیع داده‌ها (مثلاً nonce یا هر عدد تصادفی) با KDE ---

samples = np.array([50858424, 747257997, 4053532427, 2850443530, 1626044313, 2870443530])

kde = gaussian_kde(samples)
x_range = np.linspace(samples.min() * 0.8, samples.max() * 1.2, 1000)
density = kde(x_range)

top3_idx = density.argsort()[-3:]

print("\nسه مقدار احتمالی (با بیشترین چگالی KDE):")
for idx in top3_idx:
    print(f"Value: {int(x_range[idx])}")

plt.figure(figsize=(10, 5))
plt.plot(x_range, density, label='Probability Density')
plt.scatter(x_range[top3_idx], density[top3_idx], color='red', label='Top 3')
plt.title('Distribution Analysis Using KDE')
plt.xlabel('Value')
plt.ylabel('Density')
plt.legend()
plt.grid(True)
plt.show()
