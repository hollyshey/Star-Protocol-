import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from scipy.stats import gaussian_kde

# نمونه داده یک بلاک فرضی
block_data = {
    "height": 12345,
    "timestamp": "2025-06-03T07:25:45Z",
    "transactions": 1500,
    "total_sent": 5000.0,
    "avg_value": 3.33,
    "median_value": 1.25,
    "input_count": 3200,
    "output_count": 3300,
    "fees": 0.05,
    "reward": 12.5,
    "difficulty": 1.27e12,
    "nonce": 1766693919,
    "size_bytes": 1553620,
    "weight": 3993670,
    "pool": "Sample Mining Pool"
}

def analyze_block(block):
    print(f"Block Height: {block['height']}")
    print(f"Number of Transactions: {block['transactions']}")
    print(f"Total Sent: {block['total_sent']}")
    print(f"Total Fees: {block['fees']}")
    print(f"Miner Pool: {block['pool']}")
    print(f"Average Value per Transaction: {block['avg_value']:.6f}")
    print(f"Median Value per Transaction: {block['median_value']:.6f}")
    print(f"Block Size: {block['size_bytes'] / 1_000_000:.2f} MB")
    print(f"Difficulty: {block['difficulty']:.2e}")
    print(f"Nonce: {block['nonce']}")
    print(f"Timestamp: {block['timestamp']}")

    print("\n--- Basic Metrics ---")
    tx_per_byte = block['transactions'] / block['size_bytes']
    fee_per_tx = block['fees'] / block['transactions']
    print(f"Transactions per byte: {tx_per_byte:.6f}")
    print(f"Average Fee per Transaction: {fee_per_tx:.8f}")

# اجرای تحلیل اولیه
analyze_block(block_data)

# --- پیش‌بینی زمان استخراج بلاک‌های آینده با رگرسیون خطی ---

# داده شبیه‌سازی شده زمان استخراج 50 بلاک قبلی (داده ساختگی)
np.random.seed(42)
block_numbers = np.arange(1, 51).reshape(-1, 1)  # بلاک‌های 1 تا 50
block_times = np.random.normal(loc=10, scale=2, size=50)  # میانگین 10، انحراف 2

# ساخت مدل رگرسیون خطی
model = LinearRegression()
model.fit(block_numbers, block_times)

# پیش‌بینی زمان استخراج برای 50 بلاک بعدی
future_blocks = np.arange(51, 101).reshape(-1, 1)
predicted_times = model.predict(future_blocks)

print("\nپیش‌بینی زمان استخراج برای بلاک‌های آینده:")
for block_num, time_pred in zip(future_blocks.flatten(), predicted_times):
    print(f"Block {block_num}: {time_pred:.2f} units")

# نمودار زمان استخراج واقعی و پیش‌بینی شده
plt.figure(figsize=(10, 6))
plt.scatter(block_numbers, block_times, color='blue', label='Actual Times')
plt.plot(future_blocks, predicted_times, color='red', label='Predicted Times')
plt.xlabel('Block Number')
plt.ylabel('Mining Time (units)')
plt.title('Predicted Mining Time for Future Blocks')
plt.legend()
plt.grid(True)
plt.show()

# --- تحلیل توزیع نانس‌ها (Nonce) با KDE برای پیش‌بینی مقادیر محتمل ---

# نمونه نانس‌های 6 بلاک اخیر (مقدار فرضی)
nonces = np.array([
    50858424,
    747257997,
    4053532427,
    2850443530,
    1626044313,
    2870443530
])

# محاسبه KDE
kde = gaussian_kde(nonces)
x_vals = np.linspace(nonces.min() * 0.8, nonces.max() * 1.2, 1000)
prob_density = kde(x_vals)

# پیدا کردن 3 مقدار با بیشترین احتمال
top_indices = prob_density.argsort()[-3:]

print("\nمقادیر نانس احتمالی برای بلاک بعدی (سه مقدار محتمل):")
for idx in top_indices:
    print(f"Nonce: {int(x_vals[idx])}")

# نمایش نمودار توزیع نانس‌ها
plt.figure(figsize=(10, 5))
plt.plot(x_vals, prob_density, label='Nonce Probability Density')
plt.scatter(x_vals[top_indices], prob_density[top_indices], color='red', label='Top 3 Likely Nonces')
plt.title('Distribution of Nonce Values in Recent Blocks')
plt.xlabel('Nonce')
plt.ylabel('Density')
plt.legend()
plt.grid(True)
plt.show()
